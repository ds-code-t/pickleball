plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.jk1.dependency-license-report' version '2.9'
}

group = 'io.pickleball'
version = '1.1.0'

repositories {
    mavenCentral()
}


ext {
    cucumberVersions = [
            core              : '7.20.1',
            gherkin           : '28.0.0',
            messages          : '24.1.0',
            htmlFormatter     : '21.7.0',
            expressions       : '17.1.0',
            ci                : '10.0.1',
            junitXmlFormatter : '0.5.0',
            query             : '12.2.0',
            tagExpressions    : '6.1.0',
            testngXmlFormatter: '0.2.0'
    ]
}

dependencies {
    implementation platform('org.junit:junit-bom:5.11.2')
    implementation platform('com.fasterxml.jackson:jackson-bom:2.18.2')

    implementation 'org.mvel:mvel2:2.5.2.Final'
    implementation 'org.apiguardian:apiguardian-api:1.1.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.2'


    implementation 'org.freemarker:freemarker:2.3.33'
    implementation 'com.googlecode.java-diff-utils:diffutils:1.3.0'

    // Test Dependencies (now included in the runtime classpath)
    testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
    testImplementation('org.xmlunit:xmlunit-matchers:2.10.0') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testImplementation 'org.jsoup:jsoup:1.18.1'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.1'
    testImplementation 'io.vertx:vertx-web:4.5.10'
    testImplementation 'io.vertx:vertx-junit5:4.5.10'
    testImplementation 'org.reactivestreams:reactive-streams:1.0.4'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'
    api 'org.testng:testng:7.10.2'

    // Regular Dependencies with explicit versions
    implementation "io.cucumber:testng-xml-formatter:${cucumberVersions.testngXmlFormatter}"
    implementation "io.cucumber:tag-expressions:${cucumberVersions.tagExpressions}"

    implementation "io.cucumber:html-formatter:${cucumberVersions.htmlFormatter}"
    implementation "io.cucumber:junit-xml-formatter:${cucumberVersions.junitXmlFormatter}"
    implementation "io.cucumber:ci-environment:${cucumberVersions.ci}"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // Remove 'artifact jar' to avoid duplicate artifacts
        }
    }
}

test {
    outputs.upToDateWhen { false }
    useTestNG()
}

jar {
    from(rootProject.projectDir) {
        include 'LICENSE'
        include 'NOTICE'
        include 'THIRD-PARTY-NOTICES.txt'
        into 'META-INF/'
    }
}


test {
    outputs.upToDateWhen { false }
    useTestNG()
    maxParallelForks = 1  // Restrict to a single JVM
//    reuseForks = true     // Reuse the same JVM for all test classes
    systemProperty "dataproviderthreadcount", "5"
    systemProperties = System.properties
}


licenseReport {
    renderers = [
            new com.github.jk1.license.render.JsonReportRenderer(),
            new com.github.jk1.license.render.InventoryHtmlReportRenderer(),
            new com.github.jk1.license.render.TextReportRenderer(),
            new com.github.jk1.license.render.CsvReportRenderer()
    ]
    configurations = ['runtimeClasspath', 'testRuntimeClasspath']  // This will include all dependencies
    filters = [new com.github.jk1.license.filter.LicenseBundleNormalizer()]
}


task listPackages {
    doLast {
        def packages = new TreeSet<String>() // TreeSet for automatic sorting
        sourceSets.main.allJava.each { file ->
            def content = file.text
            def matcher = content =~ /package\s+([\w.]+)/
            if (matcher.find()) {
                def packageName = matcher.group(1)
                if (packageName.contains("cucumber")) {
                    packages.add(packageName)
                }
            }
        }
        packages.each { println it }
    }
}