plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.jk1.dependency-license-report' version '2.9'
    id 'signing'
    id 'org.jreleaser' version '1.16.0'
}


group = 'tools.dscode'
version = '1.1.1'


java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addStringOption('Xdoclint:none', '-quiet')
}


repositories {
    mavenCentral()
}


publishing {

    publications {
        maven(MavenPublication) {
            groupId = 'tools.dscode'
            artifactId = 'pickleball'
            from components.java
            pom {
                name = 'Pickleball'
                description = 'Dynamic cucumber scenario testing'
                url = 'https://dscode.tools'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'danshell'
                        name = 'Dan Shell'
                        email = 'dscode80@proton.me'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/ds-code-t/pickleball'
                    developerConnection = 'scm:git:https://github.com/ds-code-t/pickleball.git'
                    url = 'https://github.com/ds-code-t/pickleball'
                }
            }
        }
    }
    repositories {
        maven {
//            name = 'stagingLocal'
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}


task prepareJReleaserDirs {
    doFirst {
        // Use get().asFile to properly resolve the directory
        mkdir layout.buildDirectory.dir("jreleaser").get().asFile
        mkdir layout.buildDirectory.dir("staging-deploy").get().asFile
    }
}

// Make specifically jreleaserConfig depend on directory creation
tasks.named('jreleaserConfig').configure {
    dependsOn prepareJReleaserDirs
}

task prepareTargetJReleaserDirs {
    doFirst {
        mkdir new File(project.projectDir, "target/jreleaser")
        mkdir new File(project.projectDir, "target/staging-deploy")
    }
}

tasks.named('jreleaserFullRelease').configure {
    dependsOn prepareTargetJReleaserDirs
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
        mode = 'MEMORY'
        passphrase = findProperty('signingPassword')
        secretKey = findProperty('signingKey')
        verify = false // Skip public key verification
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    signing.verify = false
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('target/staging-deploy')
                }
            }

        }
    }
}


ext {
    cucumberVersions = [
            core              : '7.20.1',
            gherkin           : '28.0.0',
            messages          : '24.1.0',
            htmlFormatter     : '21.7.0',
            expressions       : '17.1.0',
            ci                : '10.0.1',
            junitXmlFormatter : '0.5.0',
            query             : '12.2.0',
            tagExpressions    : '6.1.0',
            testngXmlFormatter: '0.2.0'
    ]
}

dependencies {
    implementation platform('org.junit:junit-bom:5.11.2')
    implementation platform('com.fasterxml.jackson:jackson-bom:2.18.2')

    implementation 'org.mvel:mvel2:2.5.2.Final'
    implementation 'org.apiguardian:apiguardian-api:1.1.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.18.2'

    implementation 'org.freemarker:freemarker:2.3.33'
    implementation 'com.googlecode.java-diff-utils:diffutils:1.3.0'

    testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
    testImplementation('org.xmlunit:xmlunit-matchers:2.10.0') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testImplementation 'org.jsoup:jsoup:1.18.1'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.14.1'
    testImplementation 'io.vertx:vertx-web:4.5.10'
    testImplementation 'io.vertx:vertx-junit5:4.5.10'
    testImplementation 'org.reactivestreams:reactive-streams:1.0.4'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.3'
    api 'org.testng:testng:7.10.2'

    implementation "io.cucumber:testng-xml-formatter:${cucumberVersions.testngXmlFormatter}"
    implementation "io.cucumber:tag-expressions:${cucumberVersions.tagExpressions}"
    implementation "io.cucumber:html-formatter:${cucumberVersions.htmlFormatter}"
    implementation "io.cucumber:junit-xml-formatter:${cucumberVersions.junitXmlFormatter}"
    implementation "io.cucumber:ci-environment:${cucumberVersions.ci}"
}


test {
    outputs.upToDateWhen { false }
    useTestNG()
    maxParallelForks = 1
    systemProperty "dataproviderthreadcount", "5"
    systemProperties = System.properties
}

licenseReport {
    renderers = [
            new com.github.jk1.license.render.JsonReportRenderer(),
            new com.github.jk1.license.render.InventoryHtmlReportRenderer(),
            new com.github.jk1.license.render.TextReportRenderer(),
            new com.github.jk1.license.render.CsvReportRenderer()
    ]
    configurations = ['runtimeClasspath', 'testRuntimeClasspath']
    filters = [new com.github.jk1.license.filter.LicenseBundleNormalizer()]
}

task listPackages {
    doLast {
        def packages = new TreeSet<String>()
        sourceSets.main.allJava.each { file ->
            def content = file.text
            def matcher = content =~ /package\s+([\w.]+)/
            if (matcher.find()) {
                def packageName = matcher.group(1)
                if (packageName.contains("cucumber")) {
                    packages.add(packageName)
                }
            }
        }
        packages.each { println it }
    }
}

jar {
    from(rootProject.projectDir) {
        include 'LICENSE'
        include 'NOTICE'
        include 'THIRD-PARTY-NOTICES.txt'
        into 'META-INF/'
    }
}
